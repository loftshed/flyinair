{"ast":null,"code":"export const handleSubmit = async ev => {\n  // TODO if incorrect data entered, highlight which field it came from\n  ev.preventDefault();\n\n  try {\n    const {\n      firstName,\n      lastName,\n      email\n    } = ev.currentTarget.elements;\n    const firstNameValid = firstName.value.length >= 1;\n    const lastNameValid = lastName.value.length >= 1;\n    const emailValid = email.value.indexOf(\"@\") >= 1 && email.value.indexOf(\".\") <= email.value.length - 3;\n\n    if (firstNameValid && lastNameValid && emailValid) {\n      const reservationResponse = await fetch(\"/api/add-reservation\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          flight: selectedFlight,\n          seat: selectedSeat,\n          givenName: firstName.value,\n          surname: lastName.value,\n          email: email.value\n        })\n      });\n      const updateSeats = await fetch(`/api/update-availability?flightNum=${selectedFlight}&seatId=${selectedSeat}`, {\n        method: \"PATCH\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          seats: {\n            id: selectedSeat,\n            isAvailable: false\n          }\n        })\n      });\n      const {\n        data: {\n          insertedId\n        }\n      } = await reservationResponse.json();\n\n      if (insertedId) {\n        setReservationId(insertedId);\n        console.log(insertedId);\n        history.push(\"/confirmed\");\n        return;\n      }\n    } // TODO: update \"isAvailable\" on plane!!\n\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["C:/Users/petel/Documents/CODE/concordia-bootcamps/project-slingair/frontend/src/components/SeatSelect/utilities.js"],"names":["handleSubmit","ev","preventDefault","firstName","lastName","email","currentTarget","elements","firstNameValid","value","length","lastNameValid","emailValid","indexOf","reservationResponse","fetch","method","headers","Accept","body","JSON","stringify","flight","selectedFlight","seat","selectedSeat","givenName","surname","updateSeats","seats","id","isAvailable","data","insertedId","json","setReservationId","console","log","history","push","err"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,MAAOC,EAAP,IAAc;AACxC;AACAA,EAAAA,EAAE,CAACC,cAAH;;AACA,MAAI;AACF,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBC,MAAAA;AAAvB,QAAiCJ,EAAE,CAACK,aAAH,CAAiBC,QAAxD;AAEA,UAAMC,cAAc,GAAGL,SAAS,CAACM,KAAV,CAAgBC,MAAhB,IAA0B,CAAjD;AACA,UAAMC,aAAa,GAAGP,QAAQ,CAACK,KAAT,CAAeC,MAAf,IAAyB,CAA/C;AACA,UAAME,UAAU,GACdP,KAAK,CAACI,KAAN,CAAYI,OAAZ,CAAoB,GAApB,KAA4B,CAA5B,IACAR,KAAK,CAACI,KAAN,CAAYI,OAAZ,CAAoB,GAApB,KAA4BR,KAAK,CAACI,KAAN,CAAYC,MAAZ,GAAqB,CAFnD;;AAIA,QAAIF,cAAc,IAAIG,aAAlB,IAAmCC,UAAvC,EAAmD;AACjD,YAAME,mBAAmB,GAAG,MAAMC,KAAK,CAAC,sBAAD,EAAyB;AAC9DC,QAAAA,MAAM,EAAE,MADsD;AAE9DC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB;AAFT,SAFqD;AAM9DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,MAAM,EAAEC,cADW;AAEnBC,UAAAA,IAAI,EAAEC,YAFa;AAGnBC,UAAAA,SAAS,EAAEvB,SAAS,CAACM,KAHF;AAInBkB,UAAAA,OAAO,EAAEvB,QAAQ,CAACK,KAJC;AAKnBJ,UAAAA,KAAK,EAAEA,KAAK,CAACI;AALM,SAAf;AANwD,OAAzB,CAAvC;AAeA,YAAMmB,WAAW,GAAG,MAAMb,KAAK,CAC5B,sCAAqCQ,cAAe,WAAUE,YAAa,EAD/C,EAE7B;AACET,QAAAA,MAAM,EAAE,OADV;AAEEC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB;AAFT,SAFX;AAMEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBQ,UAAAA,KAAK,EAAE;AAAEC,YAAAA,EAAE,EAAEL,YAAN;AAAoBM,YAAAA,WAAW,EAAE;AAAjC;AADY,SAAf;AANR,OAF6B,CAA/B;AAcA,YAAM;AACJC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AADF,UAEF,MAAMnB,mBAAmB,CAACoB,IAApB,EAFV;;AAIA,UAAID,UAAJ,EAAgB;AACdE,QAAAA,gBAAgB,CAACF,UAAD,CAAhB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACAK,QAAAA,OAAO,CAACC,IAAR,CAAa,YAAb;AACA;AACD;AACF,KAjDC,CAmDF;;AACD,GApDD,CAoDE,OAAOC,GAAP,EAAY;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACD;AACF,CA1DM","sourcesContent":["export const handleSubmit = async (ev) => {\r\n  // TODO if incorrect data entered, highlight which field it came from\r\n  ev.preventDefault();\r\n  try {\r\n    const { firstName, lastName, email } = ev.currentTarget.elements;\r\n\r\n    const firstNameValid = firstName.value.length >= 1;\r\n    const lastNameValid = lastName.value.length >= 1;\r\n    const emailValid =\r\n      email.value.indexOf(\"@\") >= 1 &&\r\n      email.value.indexOf(\".\") <= email.value.length - 3;\r\n\r\n    if (firstNameValid && lastNameValid && emailValid) {\r\n      const reservationResponse = await fetch(\"/api/add-reservation\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          flight: selectedFlight,\r\n          seat: selectedSeat,\r\n          givenName: firstName.value,\r\n          surname: lastName.value,\r\n          email: email.value,\r\n        }),\r\n      });\r\n\r\n      const updateSeats = await fetch(\r\n        `/api/update-availability?flightNum=${selectedFlight}&seatId=${selectedSeat}`,\r\n        {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            seats: { id: selectedSeat, isAvailable: false },\r\n          }),\r\n        }\r\n      );\r\n\r\n      const {\r\n        data: { insertedId },\r\n      } = await reservationResponse.json();\r\n\r\n      if (insertedId) {\r\n        setReservationId(insertedId);\r\n        console.log(insertedId);\r\n        history.push(\"/confirmed\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // TODO: update \"isAvailable\" on plane!!\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}